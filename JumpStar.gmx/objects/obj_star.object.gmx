<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_star</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_star_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialize</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initialize
//////////////////////////////////////////

/* base vars */
image_speed = 0.1;

/* velocity */
xvel = 0;
yvel = 0;
max_xvel = 4;
max_yvel = 8;

/* acceleration */
xaccel = 0.1;
yaccel = 0.1;

/* shoothing star */
preshootingstar = false; /* brief pre-shooting charge state */
shoot_delay[1] = 40; /* preshootingstar duration */
shoot_delay[0] = shoot_delay[1]; 
shine_rate[1] = 6; /* rate at which shine is lost while shootingstar */
shine_rate[0] = shine_rate[1];
min_shine = 50; /* minimum shine needed to shootingstar */
shootingstar = false; /* shooting star state */

/* multipliers */
jumpstrength = 1; /* base jump strength */
jumpcharge = 0;   /* extra boost */
chargerate = 0.1; /* charge rate */
max_jumpcharge = 4; /* jump boost cap */
weight  = 0.1; /* gravity affectiveness */

/* scores */
shine = 100; /* base shine */
show_shine[1] = 60; /* show shine score for a bit on pickup */
show_shine[0] = 0;
distance = 0; /* distance traveled */

/* flags */
grounded = false; /* is player on a surface? */

/* animation */
roll = 0; /* lonely rolling star */
facing = 1; /* sign of last nonzero xvel */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Tracked Instances</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Refresh tracked instances
//////////////////////////////////////////

/* Environment */
Env = instance_nearest(x, y, obj_env);

/* Surface */
if (grounded) {Surface = instance_nearest(x, y + sprite_height/2, obj_tile);} 
else          {Surface = noone;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Player Input</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Player Input
//////////////////////////////////////////

/* basic movement/navigation */
in_left  = keyboard_check(vk_left)  || keyboard_check(ord('A'));
in_right = keyboard_check(vk_right) || keyboard_check(ord('D'));
in_up    = keyboard_check(vk_up)    || keyboard_check(ord('W'));
in_down  = keyboard_check(vk_down)  || keyboard_check(ord('S'));

/* jump/action/advance */
in_chargejump = keyboard_check(vk_space);
in_jump = keyboard_check_released(vk_space);

/* shootingstar */
in_shootingstar = keyboard_check(vk_shift);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Velocity, Collision, &amp; Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!paused)
{
    // Velocity
    //////////////////////////////////////////
    
    /* affect horizontal acceleration */
    if (shootingstar) 
    {
        if (in_left) 
        {
            xvel -= 0.5*xaccel;
        }
        else if (in_right)
        {
            xvel += 0.5*xaccel;
        }
    }
    else if (preshootingstar)
    {
        if (xvel != 0)
        {
            if (sign(xvel - xaccel*sign(xvel)) != -sign(xvel))
                xvel -= xaccel*sign(xvel);
            else
                xvel = 0;
        }
    }
    if (grounded)
    {
        if ((!in_left &amp;&amp; !in_right) || in_chargejump || preshootingstar) 
        {
            if (xvel != 0)
            {
                if (sign(xvel - xaccel*2*sign(xvel)) != -sign(xvel))
                    xvel -= xaccel*2*sign(xvel);
                else
                    xvel = 0;
            }
        }
        else if (in_left &amp;&amp; !place_meeting(x - 1, y, obj_tile)) 
        {
            xvel -= xaccel;
            if (xvel == 0) xvel -= xaccel;
        }
        else if (in_right &amp;&amp; !place_meeting(x + 1, y, obj_tile))
        {
            xvel += xaccel;
            if (xvel == 0) xvel += xaccel;
        }
    }
    else /* airborn */
    {
        if (in_left &amp;&amp; !place_meeting(x - 1, y, obj_tile)) 
        {
            xvel -= xaccel;
        }
        if (in_right &amp;&amp; !place_meeting(x + 1, y, obj_tile))
        {
            xvel += xaccel;
        }
    }
    
    
    /* affect vertical acceleration */
    if (shootingstar)
    {
        if (yvel &gt;= -max_yvel)
        {
            yvel -= 2*yaccel;
        }
    }
    else if (preshootingstar)
    {
        if (yvel != 0)
        {
            if (sign(yvel - yaccel*0.5*sign(yvel)) != -sign(yvel))
                yvel -= yaccel*0.5*sign(yvel);
            else
                yvel = 0;
        }
    }
    else if (grounded) 
    {
        if (in_chargejump)
        {
            jumpcharge += chargerate;
            if (jumpcharge &gt; max_jumpcharge) jumpcharge = max_jumpcharge;
        }
        
        if (in_jump &amp;&amp; grounded)
        {
            yvel = -(jumpstrength + jumpcharge);
            
            part_type_gravity(part_jump, 0.05*Env.env_gravity, 270);
            part_type_speed(part_jump, 1, jumpcharge, 0, 0);
            part_type_direction(part_jump, 40 + 5*jumpcharge, 140 - 5*jumpcharge, 0, 0);
            part_particles_create(part_sys, x, y + sprite_height/2, part_jump, jumpcharge - 1);
            
            jumpcharge = 0;
            grounded = false;   
        }
    }
    else  
    {
        yvel += weight*Env.env_gravity;
    }
    
    
    
    // Collision
    //////////////////////////////////////////
    
    if (!shootingstar)
    {
        /* horizontal collision */
        if (place_meeting(x + xvel, y, obj_tile)) 
        {
            while (!place_meeting(x + sign(xvel), y, obj_tile))
            {
                x += sign(xvel);
            }
        
            if (abs(xvel) &gt;= max_xvel/3)
            {
                part_type_direction(part_land, 85, 95, 0, 0);
                part_particles_create(part_sys, x + facing*abs(sprite_width)/2, y, part_land, 1);
            }
            
            xvel = -xvel/2;
        }
        
        /* vertical collision */
        if (place_meeting(x, y + yvel, obj_tile)) 
        {
            while (!place_meeting(x, y + sign(yvel), obj_tile))
            {
                y += sign(yvel);
            }
            
            if (yvel &gt; 0) 
            {
                grounded = true;
                if (abs(yvel) &gt;= max_yvel/3)
                {
                    part_type_direction(part_land, 0, 180, 0, 0);
                    part_particles_create(part_sys, x, y + sprite_height/2, part_land, 2);
                }
            }
            else if (abs(yvel) &gt;= max_yvel/3)
            {   
                part_type_direction(part_land, 180, 359, 0, 0);
                part_particles_create(part_sys, x, y - sprite_height/2, part_land, 2);
            }
            
            if (abs(yvel) &gt; max_yvel/3) yvel = -yvel/3;
            else yvel = 0;
        } 
        if (!place_meeting(x, y + 1, obj_tile) &amp;&amp; grounded)
        {
            grounded = false;
        }
    }
}
    
/* room wrap */
if (x &lt; 0 - sprite_width &amp;&amp; xvel &lt; 0) x = room_width + sprite_width;
else if (x &gt; room_width + sprite_width &amp;&amp; xvel &gt; 0) x = 0 - sprite_width;



// Movement
//////////////////////////////////////////

/* check max velocity */
if (abs(xvel) &gt; max_xvel) xvel = sign(xvel)*max_xvel;
if (abs(yvel) &gt; max_yvel) yvel = sign(yvel)*max_yvel;

/* facing */
if (xvel != 0 &amp;&amp; facing != sign(xvel)) facing = sign(xvel);

/* move */
x += xvel;
if (Env.env_procedural) Env.env_yvel = yvel;
else y += yvel;
distance -= yvel;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Shooting Star</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Shooting Star */
if (in_shootingstar)
{
    if (!shootingstar &amp;&amp; !preshootingstar &amp;&amp; shine &gt; min_shine) preshootingstar = true;
    else if (preshootingstar &amp;&amp; shoot_delay[0] &gt; 0) {shoot_delay[0]--;}
    else if (preshootingstar &amp;&amp; yvel &lt;= 0 &amp;&amp; shoot_delay[0] == 0) 
    {
        shootingstar = true;
        shoot_delay[0] = shoot_delay[1];   
        preshootingstar = false;    
    }
    else if (shootingstar) {
        part_particles_create(part_sys, x, y + sprite_height/3, part_shootingstar, 1);
        
        if (shine_rate[0]-- &lt;= 0)
        {
            shine--;
            shine_rate[0] = shine_rate[1];
            
            if (shine &lt; min_shine) shootingstar = false;
        }
    }
}
else
{
    if (!shootingstar) 
    {
        shoot_delay[0] = shoot_delay[1];
        preshootingstar = false;
    }
    else shootingstar = false;   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Jump Charge Bar</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw jump charge bar
//////////////////////////////////////////

if (!paused)
{
    if (in_chargejump &amp;&amp; grounded)
    {
        draw_set_colour(col_darkgrape);
        draw_rectangle( x + sprite_width,
                        y + sprite_height/3,
                        x + sprite_width + 1,
                        y + sprite_height/3 - 2*(max_jumpcharge - (max_jumpcharge - jumpcharge)),
                        false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Sprite Control</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Sprite Control
//////////////////////////////////////////

if (!paused)
{   
    if (shootingstar) 
    {
        sprite_index = spr_star_shootingstar;
        image_speed = 0.4;
        
    }
    else if (preshootingstar)
    {
        sprite_index = spr_star_preshootingstar;
        if (roll != 0) roll = 0;
        image_speed = 0.1;
        
        if (image_index &gt; 3) 
        {
            image_speed = 0;    
        }
    }
    else if (grounded)
    {
        if (in_chargejump) 
        {
            
        }
        else if (xvel != 0) 
        {
            sprite_index = spr_star_walk;
            roll -= 4*xvel;
        }
        else 
        {
            roll = 0;
            image_xscale = facing; /* facing */
            sprite_index = spr_star;
        }
    }
    else /* airborn */
    {
        sprite_index = spr_star_walk;
        roll -= 2*(xvel+sign(xvel));
    }
}

draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,roll,image_blend,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
